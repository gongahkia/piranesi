x (A) try and debug the broken edge detection 
x (A) consider putting the images through some preprocessing (see elefant internship repo) to see whether that helps with edge detection

(A) add more details that I want to extract, such as author name, book cover, authorial date etc
(A) for documentation sake, place comments for each file within a python docstring """ """ at the top of all python source files
(A) try and debug the broken OCR as an alternative to the broken edge detection 
(A) look into openlibrary or openbook and using their exposed API to obtain a DATABASE of book covers and names
(A) if this API does not work, then consider scraping from scratch and saving it to an online database like firebase for my easy querying
(A) aesthtically, can keep the login screen as cryptic as the library of babel's login screen from here https://libraryofbabel.info/

(A) store scraped data and other relevant things in mongodb, then learn how to spin things up on a local instance, schedule everything with anacron or github scheduled actions, see huey's lacuna case website that has scheduled scraping similar to https://github.com/hueyy/lacuna-db
(A) implement the backend logic with the frontend in nextjs react 
(A) work out how to deploy the entire nonsense bullshit on vercel
(A) add user authentication since I want people to be able to log in, create profiles and everything
(A) enter webapp heaven and deploy piranesi as a full-stack webapp with complete functionality to allow users to visit each other's libraries, similar to animal crossing
(A) allow leaving of comments on people's libraries
(A) work on finetuning the OCR of text from the bookcover, then using that book's title to automatically search for the actual book cover
(A) if that does not work, perhaps allow users to just search for their existing book from the firebase database and the book cover will appear automaticallyI
(A) an alternative for the manual uploading option would be that if the OCR and the OPEN-CV book cover / book spine extraction doesn't work, consider having users handle the cropping themselves when they upload the images
(A) then figure out how to export the bookshelf to a HTML component that can work when hovered over and can be readily embedded into user's websites
(A) see if there's anyway and if there's a necessary application for integrating trained ML or AI models into this project, be it for verification, classification or others
(A) in the README.md, give credit to this website [max-bittker](https://maxbittker.github.io/) under an ## inspirations section, and also add further diagrams as required and under ## rationale, include "for users to easily create online bookshelves that more accurately reflected the imperfect but loved nature of their physical book collections" and the screenshots of telegram chat from bun about the idea of a physical book collection, see under ./asset/chat.png
